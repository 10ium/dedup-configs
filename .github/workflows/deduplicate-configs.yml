name: Generate Accurate Config Files

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  OUTPUT_DIR: output_configs

jobs:
  generate-configs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install requests PyYAML

      - name: Check for urls.txt
        run: |
          if [ ! -s urls.txt ]; then
            echo "urls.txt is missing or empty"
            exit 1
          fi

      - name: Check for defaults.yaml
        run: |
          if [ ! -f defaults.yaml ]; then
            echo "defaults.yaml is missing."
            # exit 1 # Uncomment to fail if defaults.yaml is missing
          fi

      - name: Clean output directory
        run: |
          rm -rf ${{ env.OUTPUT_DIR }}
          mkdir -p ${{ env.OUTPUT_DIR }}

      - name: Run generation script
        run: |
          python scripts/deduplicate.py \
            --input urls.txt \
            --defaults defaults.yaml \
            --output-dir ${{ env.OUTPUT_DIR }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check for changes & Stage Output Dir
        id: check_changes
        run: |
          # Add only output dir first to see if script generated anything
          git add ${{ env.OUTPUT_DIR }}
          if ! git diff --staged --quiet; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in output directory."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update README.md (If changes occurred)
        id: update_readme
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          README_FILE="README.md"
          OUTPUT_DIR="${{ env.OUTPUT_DIR }}"
          HEADER="## Generated Outputs"
          START_MARKER=""
          END_MARKER=""
          TEMP_LIST="generated_list.md"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}/raw/${{ github.ref_name }}"

          # 1. Generate new list
          echo "" > "$TEMP_LIST" # Clear or create file
          file_count=0
          for file in $(find "$OUTPUT_DIR" -type f -name "*.txt" | sort); do
              filename=$(basename "$file")
              echo "- \`$filename\`: $REPO_URL/$file" >> "$TEMP_LIST"
              file_count=$((file_count + 1))
          done

          # 2. Check if list is empty
          if [ $file_count -eq 0 ]; then
              echo "No .txt files found, not updating README."
              echo "readme_updated=false" >> $GITHUB_OUTPUT
              exit 0
          fi

          # 3. Ensure header exists, add markers if needed
          if ! grep -q "$HEADER" "$README_FILE"; then
              echo -e "\n$HEADER\n$START_MARKER\n$END_MARKER\n" >> "$README_FILE"
          elif ! grep -q "$START_MARKER" "$README_FILE"; then
              sed -i "/^$HEADER\$/a $START_MARKER\n$END_MARKER" "$README_FILE"
          fi

          # 5. Delete old content between markers (using awk for robustness)
          awk -v start="$START_MARKER" -v end="$END_MARKER" '
              $0 == start {print; in_block=1; next}
              $0 == end   {print; in_block=0; next}
              !in_block  {print}
          ' "$README_FILE" > "$README_FILE.tmp" && mv "$README_FILE.tmp" "$README_FILE"

          # 6. Insert new content after start marker
          sed -i "/$START_MARKER/r $TEMP_LIST" "$README_FILE"

          rm "$TEMP_LIST"
          git add "$README_FILE"
          echo "readme_updated=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        # Only run if output_configs changed.
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          # Add *all* potential changes again, just to be sure
          git add ${{ env.OUTPUT_DIR }} README.md
          # Check if there are *actually* changes staged now
          if ! git diff --staged --quiet; then
            git commit -m "Automated config generation: update outputs"
            git push
          else
             echo "No net changes to commit."
          fi