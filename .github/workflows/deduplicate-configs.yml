- name: Update README.md (If changes occurred)
        id: update_readme
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          set -x # Keep debug mode one last time!

          README_FILE="README.md"
          OUTPUT_DIR="${{ env.OUTPUT_DIR }}"
          HEADER="## Generated Outputs"
          START_MARKER="###_GENERATED_START_###"
          END_MARKER="###_GENERATED_END_###"
          TEMP_LIST="generated_list.md"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}/raw/${{ github.ref_name }}"
          README_CHANGED=false

          # Function to get country flag emoji
          get_flag() {
            country_code=$(echo "$1" | cut -d'.' -f1) # Extracts "Canada" from "Canada.txt"
            case "$country_code" in
              "Canada") echo "🇨🇦" ;;
              "France") echo "🇫🇷" ;;
              "Germany") echo "🇩🇪" ;;
              "Iran") echo "🇮🇷" ;;
              "Japan") echo "🇯🇵" ;;
              "Russia") echo "🇷🇺" ;;
              "Namibia") echo "🇳🇦" ;;
              "Netherlands") echo "🇳🇱" ;;
              "USA") echo "🇺🇸" ;;
              "UK") echo "🇬🇧" ;;
              # Add more countries and their flags as needed
              *) echo "🏳️" ;; # Default flag
            esac
          }

          # 1. Generate new list with flags
          echo "" > "$TEMP_LIST"
          file_count=0
          if [ -d "$OUTPUT_DIR" ]; then
            for file_path in $(find "$OUTPUT_DIR" -type f | sort); do
              filename=$(basename "$file_path")
              flag=$(get_flag "$filename")
              echo "- $flag \`$filename\`: $REPO_URL/$file_path" >> "$TEMP_LIST"
              file_count=$((file_count + 1))
            done
          fi

          # 2. Check if list is empty
          if [ $file_count -eq 0 ]; then
            echo "No output files found, not updating README."
            # If no files, we might want to clear the existing list in README
            # For now, exiting, but you could adapt to clear the section if needed.
          fi

          # 3. Ensure README exists & has header/markers
          touch "$README_FILE"
          if ! grep -Fq "$HEADER" "$README_FILE"; then
            echo -e "\n$HEADER\n$START_MARKER\n$END_MARKER\n" >> "$README_FILE"; README_CHANGED=true
          elif ! grep -Fq "$START_MARKER" "$README_FILE"; then
            # Header exists, but markers are missing below it. Add them.
            # Using awk to insert after header to be more robust
            awk -v h="$HEADER" -v sm="$START_MARKER" -v em="$END_MARKER" '
              1; # print current line
              $0 == h { print sm; print em; }
            ' "$README_FILE" > "$README_FILE.new" && mv "$README_FILE.new" "$README_FILE"
            README_CHANGED=true
          fi

          # 4. Define AWK script for deletion (Corrected variable names)
          # This script prints lines outside the block, and the start/end markers themselves.
          # It effectively deletes what's *between* start_var and end_var.
          AWK_DELETE_SCRIPT='
          BEGIN { in_block=0 }
          $0 == end_var   { print; in_block=0; next }
          $0 == start_var { print; in_block=1; next }
          !in_block { print }
          '
          # Run AWK, use temp file. Pass variables correctly.
          awk -v start_var="$START_MARKER" -v end_var="$END_MARKER" "$AWK_DELETE_SCRIPT" "$README_FILE" > "$README_FILE.tmp"

          # 5. Insert new list into temp file (Using / as delimiter - SAFE)
          # The new list is inserted *after* the START_MARKER line.
          if [ $file_count -gt 0 ]; then
            sed -i "/$(echo "$START_MARKER" | sed 's/[&/\]/\\&/g')/r $TEMP_LIST" "$README_FILE.tmp"
          fi
          
          # 6. Replace original file if changed
          if ! cmp -s "$README_FILE" "$README_FILE.tmp"; then
            mv "$README_FILE.tmp" "$README_FILE"
            README_CHANGED=true
          else
            rm "$README_FILE.tmp"
          fi

          rm -f "$TEMP_LIST"

          # Only add README if it actually changed
          if [ "$README_CHANGED" = true ] ; then
            git add "$README_FILE"
          fi
